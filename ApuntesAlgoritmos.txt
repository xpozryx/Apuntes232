#########################################################################################
22/02/2023

Indique el numero de veces que se ejecuta la instruccion a <- a+b
en cada uno de los siguientes pseudocodigos

Algoritmo 1
	for i <- 1 to n
		a <- a+b

La instruccion se ejecuta n veces
La instruccion se ejecuta n+1 veces

Algoritmo 2
	for i <- 1 to n do		n+1
		for j <- 1 to n do	n(n+1)
			a <- a+b		n^2

La instruccion se ejecuta n^2+1


Algoritmo 3
	for i <- 1 to n do			n+1
		for j <- 1 to n do		n(n+1)
			for k <- 1 to n do	n^2(n+1)
				if a < b then 	n^2
					a <- a+b

La instruccion se ejectua 

Cosnidere un arreglo con ndiferentes numeros enteros positivos, disene 
un pseudocodigo para cada caso

1) Encontrar el valor minimo
Input: L[] enteros positivos 
Output: Valor minimo

	min <- L[1]
	for i <- 2 to n do
		if min > L[i]
			min < - L[i]

	return min

Mejor caso: Esfuerzo computacional sean las minimas (O)
Peor caso: (o)
Mejor caso: (omega)

Ecuaciones que dependen de si mismas son las ecuaciones recurrentes

Tarea: Programar Ejerccio 3

#########################################################################################
22/02/2023

Libro de Cromen
Pelicula TSP

Problemas de permutaciones, Problemas de combinaciones, Problema del agente viajero, Problema de la 
asigacion cuadratica(Quadratic assignmet problem)

NP: No polinomial

Tecnicas de analisis de algoritmos
	Un algritmo debe considerar los siguientes aspectos
		Definir entrada y salida
		No debe ser ambiguo
		Debe ser efectivo, debe completarce en un timepo finito
		Debe contemplar todos los casos de entrada 
		Cada caso debe tener una solucion unica


Un determinado problema puede ser resuelto por distintos algoritmos

Analisis apriori
El comportamiento de un algoritmo puede variar notablemente para diferentes conjuntos de entrada

	Peor Caso: El mayor tiempo que puede tardar un algoritmo en ejecutarce (O)
	Mejor caso: El menor tiempo que puede tardar un algoritmo en ejecutarce (o)
	Caso Promedios (Omega)

#########################################################################################
27/02/2023
Que es un algoritmo?
	Conjunto de pasos finitos para resolver un problema, no debe ser ambiguo
	Debe resolver todos los posibles casos de entrada y debe dar un resultado (determinista)

Porque es importante el analisis de los algoritmos?
	Evita reinventar soluciones
	Buscar la eficiencia ya sea en tiempo y memoria de un algoritmo.
	Conocer las estrategias algoritmicas

Cuales son los tipos de analisis?
	Apriori
		Analisis teorico en dondde se analisa de forma general los pasos que sigue el algoritmo
		y la complejidad de este en todos sus casos(Mejor, peor, promedio)

	Posteriori
		Analisis practico que considera las caracteristicas de la computadora, lenguajes de 
		programacion y sus tiempos

Que estrategias existen para disenar un algoritmo?
	Fuerza Bruta
	
	Recursividad

	Voraces/(Greedy)

	Programacion dinamica(buttom up/top down)

	Divide y venceras

	Probabilistas

Que clases de problemas se resuelven los algoritmos?
	P(Polinomial)
		Se resuelven en un tiempo polinomial

	NP

	NP-Completos

	NP-duros

Que es notacion asintotica?
	Funcion que acota al tiempos

	Cota superior asisntotica (Notacion O mayuscula)

	Cota inferior asisnotica (Notacion Omega)

	Teta
		Cumple las dos realciones O y Omega

	Las cotas se estudian desde un punto X0

Orden de Complejidad

	Orden Constante O(1)
	
	Orden Logaritmica O(Log n)

	Orden Lineal O(n)

	Orden Cuadratica O(n^2)

	Orden Polinomial O(n^a a>2)

	Orden exponencial O(a^n a>2)

	Orden Factorial O(n!)

#########################################################################################
01/03/2023

Algoritmos de ordenamiento

Algoritmo 1

ALgoritmo Bubble sort
Input: Lista de valores esnteros a ordenar
Output: Lista ordenada

Begin
	n <- length(L)						
	repeat
		swapped <- False				n
		for i <- 1 to n 				n(n+1)
			if (L[i-1] > L[i]) then 
				swap(L[i-1], L[i])
				swapped <- True

		n <- n-1
	until not swapped
return L

Para obtener la complejidad del arlgoritmo se suman los tiempo de ejecucion de cada lineas

1+1+n+n(n+1)+3n^2+2n+1 
El tiempo en terminos de n para este algoritmo es 3+4n+4n^2

O(n) = k(n^2)

Algoritmo 2

Insertion sort
Input: L(lista desordenada)
Output: L (Ordenada)

Begin 
	n <- lenght(L) 							1
	for i <- 2 to n do 						n
		j <- 1								n-1
		while j => and L[j] > L[j+1] do 	n-1
			swap (L[j], L[j+1]) 			
			j <- j+1

return L

Tabulacion

i 		j

2		1, 2... n
3		2, 3... n
4		3, 4... n
.		,
n-1 	n-2, n-1, n
n 		n-1, n



Algorutmo 3

Merge Sort
Input: L(lista desordenada), p(Indice), r(indice) 
Output: L (Ordenada)

Begin
	MergeSort(L, p, r)
	if(p < r) then
		q <- [|(p+r)/2|x]
		MergeSort(L, p, q)
		MergeSort(L, q+1, r)
		Merge(L, p, q, r)

return L


#########################################################################################